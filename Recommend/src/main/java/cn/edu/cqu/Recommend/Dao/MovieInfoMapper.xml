<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.cqu.Recommend.Dao.MovieInfoMapper">
	<resultMap id="BaseResultMap"
		type="cn.edu.cqu.Recommend.Pojo.MovieInfo">
		<result column="movie_id" jdbcType="INTEGER" property="movieId" />
		<result column="movie_name" jdbcType="VARCHAR"
			property="movieName" />
		<result column="movie_rate" jdbcType="DECIMAL"
			property="movieRate" />
		<result column="director" jdbcType="VARCHAR"
			property="director" />
		<result column="movie_image" jdbcType="VARCHAR"
			property="movieImage" />
	</resultMap>
	<resultMap extends="BaseResultMap" id="ResultMapWithBLOBs"
		type="cn.edu.cqu.Recommend.Pojo.MovieInfoWithBLOBs">
		<result column="movie_type" jdbcType="LONGVARCHAR"
			property="movieType" />
		<result column="actor" jdbcType="LONGVARCHAR" property="actor" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		movie_id, movie_name, movie_rate, director, movie_image
	</sql>
	<sql id="Blob_Column_List">
		movie_type, actor
	</sql>
	<select id="selectByExampleWithBLOBs"
		parameterType="cn.edu.cqu.Recommend.Pojo.MovieInfoExample"
		resultMap="ResultMapWithBLOBs">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from movie_info
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByExample"
		parameterType="cn.edu.cqu.Recommend.Pojo.MovieInfoExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from movie_info
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<delete id="deleteByExample"
		parameterType="cn.edu.cqu.Recommend.Pojo.MovieInfoExample">
		delete from movie_info
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert"
		parameterType="cn.edu.cqu.Recommend.Pojo.MovieInfoWithBLOBs">
		insert into movie_info (movie_id, movie_name,
		movie_rate,
		director, movie_image, movie_type,
		actor)
		values
		(#{movieId,jdbcType=INTEGER}, #{movieName,jdbcType=VARCHAR},
		#{movieRate,jdbcType=DECIMAL},
		#{director,jdbcType=VARCHAR},
		#{movieImage,jdbcType=VARCHAR}, #{movieType,jdbcType=LONGVARCHAR},
		#{actor,jdbcType=LONGVARCHAR})
	</insert>
	<insert id="insertSelective"
		parameterType="cn.edu.cqu.Recommend.Pojo.MovieInfoWithBLOBs">
		insert into movie_info
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="movieId != null">
				movie_id,
			</if>
			<if test="movieName != null">
				movie_name,
			</if>
			<if test="movieRate != null">
				movie_rate,
			</if>
			<if test="director != null">
				director,
			</if>
			<if test="movieImage != null">
				movie_image,
			</if>
			<if test="movieType != null">
				movie_type,
			</if>
			<if test="actor != null">
				actor,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="movieId != null">
				#{movieId,jdbcType=INTEGER},
			</if>
			<if test="movieName != null">
				#{movieName,jdbcType=VARCHAR},
			</if>
			<if test="movieRate != null">
				#{movieRate,jdbcType=DECIMAL},
			</if>
			<if test="director != null">
				#{director,jdbcType=VARCHAR},
			</if>
			<if test="movieImage != null">
				#{movieImage,jdbcType=VARCHAR},
			</if>
			<if test="movieType != null">
				#{movieType,jdbcType=LONGVARCHAR},
			</if>
			<if test="actor != null">
				#{actor,jdbcType=LONGVARCHAR},
			</if>
		</trim>
	</insert>
	<select id="countByExample"
		parameterType="cn.edu.cqu.Recommend.Pojo.MovieInfoExample"
		resultType="java.lang.Long">
		select count(*) from movie_info
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update movie_info
		<set>
			<if test="record.movieId != null">
				movie_id = #{record.movieId,jdbcType=INTEGER},
			</if>
			<if test="record.movieName != null">
				movie_name = #{record.movieName,jdbcType=VARCHAR},
			</if>
			<if test="record.movieRate != null">
				movie_rate = #{record.movieRate,jdbcType=DECIMAL},
			</if>
			<if test="record.director != null">
				director = #{record.director,jdbcType=VARCHAR},
			</if>
			<if test="record.movieImage != null">
				movie_image = #{record.movieImage,jdbcType=VARCHAR},
			</if>
			<if test="record.movieType != null">
				movie_type = #{record.movieType,jdbcType=LONGVARCHAR},
			</if>
			<if test="record.actor != null">
				actor = #{record.actor,jdbcType=LONGVARCHAR},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExampleWithBLOBs" parameterType="map">
		update movie_info
		set movie_id = #{record.movieId,jdbcType=INTEGER},
		movie_name = #{record.movieName,jdbcType=VARCHAR},
		movie_rate =
		#{record.movieRate,jdbcType=DECIMAL},
		director =
		#{record.director,jdbcType=VARCHAR},
		movie_image =
		#{record.movieImage,jdbcType=VARCHAR},
		movie_type =
		#{record.movieType,jdbcType=LONGVARCHAR},
		actor =
		#{record.actor,jdbcType=LONGVARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update movie_info
		set movie_id = #{record.movieId,jdbcType=INTEGER},
		movie_name = #{record.movieName,jdbcType=VARCHAR},
		movie_rate =
		#{record.movieRate,jdbcType=DECIMAL},
		director =
		#{record.director,jdbcType=VARCHAR},
		movie_image =
		#{record.movieImage,jdbcType=VARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>

	<select id="randomRecommend" resultMap="ResultMapWithBLOBs">
		select *
		from movie_info
		ORDER BY RAND() limit 5
	</select>

	<select id="selectMovieByActorAndDirector" resultType="Integer">
		SELECT
		director_movie_map.movie_id
		FROM
		director_movie_map
		JOIN director ON
		director.director_id = director_movie_map.director_id
		WHERE
		director.director_name LIKE #{condition} UNION
		SELECT
		actor_movie_map.movie_id
		FROM
		actor_movie_map
		JOIN actor ON
		actor.actor_id = actor_movie_map.actor_id
		WHERE
		actor.actor_name LIKE
		#{condition}
	</select>
</mapper>